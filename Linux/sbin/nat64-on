#!/usr/bin/env bash
export PATH=$PATH:/usr/local/sbin:/usr/local/bin

ME=${0##*/}

FDS="$(lsof -a -p $$ -d'^0-2,^255' 2>/dev/null|awk '{if($4~/^[0-9]+/){gsub(/[^0-9]/,"",$4);print $4}}')"
for fdd in $FDS; do
	eval "exec $fdd>&-"
done

NAT64_PREFFIX=64:ff9b::/96

msg(){
    local P
    P="${ME}[$$]${i:+(try #$i)}"
    echo "$P:" "$1" >&2
    logger -t "$P" "$1"
}

get_nat64_routers(){
	ip -6 r s $NAT64_PREFFIX|awk -v r="$NAT64_PREFFIX" '$1==r && $2=="via" && $3~/fe80:/ && $4=="dev" {print $3" "$5}'
}

get_dns64_servers(){
local NAT64="$1"
local DNS64=
while read router iface; do
	if [ -z "$router" ]; then
		continue
	fi
	msg "NAT64 router: $router"
	DNS64="$(rdisc6 -1 $router $iface|awk '/Recursive DNS server/ {print $5}'|head -1)"
	if [ -z "$DNS64" ]; then
		msg "No DNS64 addressed announced by $router"
		continue
	fi
	msg "DNS64 server: $DNS64"
	echo "$DNS64"
done <<< "$NAT64"
}

check_ra(){
	local iface=$1
	local ra
	ra=$(sysctl net.ipv6.conf.${iface}.accept_ra|awk '{print $3}')
	if [ -z "$ra" ]; then
		dolog "unable to get sysctl var accept_ra for $iface"
		return 1
	fi
	if [ $ra -eq 0 ]; then
		return 2
	fi
}
check_ra_max_plen(){
	local iface=$1
	local maxplen
	maxplen=$(sysctl net.ipv6.conf.${iface}.accept_ra_rt_info_max_plen|awk '{print $3}')
	if [ -z "$maxplen" ]; then
		dolog "unable to get sysctl var accept_ra_rt_info_max_plen for $iface"
		return 1
	fi
	if [ $maxplen -lt 96 ]; then
		return 2
	fi
}

enable_ra(){
	local iface=$1
	if ! sysctl net.ipv6.conf.${iface}.accept_ra_rt_info_max_plen=96; then
		dolog "unable to set maxplen for $iface"
		return 1
	fi
	echo "net.ipv6.conf.${iface}.accept_ra_rt_info_max_plen=96" > /etc/sysctl.d/10-rio-nat64.conf
}

precheck(){
	local iface=${1:-eth0}
	if ! check_ra $iface; then
		msg "RA is disabled on $iface. NAT64 routes will not be discovered by kernel. Will try to scan from userspace without enabling RA."
		disc="$(rdisc6 $iface|awk -v preffix="$NAT64_PREFFIX" '$1=="Route" && $2==":" && $3==preffix {P=$3;next}; $1=="from" && P!="" {print P" "$2;P="";next}')"
		if [ -z "$disc" ]; then
			msg "Scan on $iface gave no NAT64 routers. Exiting"
			exit 4
		fi
		echo "$disc"| while read p r; do
			if [ "$p" != "$NAT64_PREFFIX" ]; then
				msg "BUG: scan gave different preffix. Exiting"
				exit 5
			fi
			if [ -z "$r" ]; then
				msg "BUG: scan gave empty router. Exiting"
				exit 6
			fi
			msg "ip -6 route add $NAT64_PREFFIX via $r dev $iface"
			ip -6 route add $NAT64_PREFFIX via $r dev $iface
		done
	elif ! check_ra_max_plen $iface; then
		msg "Enabling IPv6 route information support (RA-RIO) on $iface"
		if ! enable_ra $iface; then
			return 1
		fi
	fi
	msg "Force route discovery"
	R=$(rdisc6 -n -q $iface | grep "$NAT64_PREFFIX"|grep -v "^$"|wc -l)
	if [ $R -gt 0 ]; then
		msg "There are $R NAT64 routers on the network"
	else
		msg "No NAT64 routers found. It may take some time to appear. Run me again to check."
	fi
}

checked=
for i in `seq 12`; do
	NAT64="$(get_nat64_routers)"
	if [ -z "$NAT64" ]; then
		if [ -z "$checked" ]; then
			msg "No NAT64 routes present"
			precheck
			checked=1
			continue
		fi
		sleep 3
		continue
	fi
	break
done
i=

if [ -z "$NAT64" ]; then
	msg "No NAT64 routers announced"
	exit 1
fi

DNS64="$(get_dns64_servers "$NAT64")"
if [ -z "$DNS64" ]; then
	msg "No DNS64 servers announced"
	exit 1
fi

RESOLV="; -=NAT64=- resolver. nat64-off to switch back to original resolv.conf
$(for i in $DNS64; do echo "nameserver $i"; done)"

T="$(mktemp)"
(grep -v "^nameserver" /etc/resolv.conf|grep -v "NAT64"; echo "$RESOLV") > "$T"

if which resolvconf >/dev/null 2>&1; then
	if resolvconf --updates-are-enabled; then
		if ! resolvconf --disable-updates; then
			msg "ERROR: Failed to disable resolvconf updates"
		fi
	fi
	filter='cat'
else
	if ! grep -e "-=NAT64=-" /etc/resolv.conf >/dev/null; then
		cp -f /etc/resolv.conf /etc/resolv.conf--pre-nat64
	fi
	filter='tee /etc/resolv.conf--nat64'
fi
# Real update

cat "$T" | $filter > /etc/resolv.conf

msg "DNS64 is now enabled. (use ${ME%%-*}-off to disable)"

