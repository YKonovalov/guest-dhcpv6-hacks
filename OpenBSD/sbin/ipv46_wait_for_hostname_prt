#!/usr/bin/env bash
export PATH=$PATH:/usr/local/sbin:/usr/local/bin

ME=${0##*/}

FDS="$(lsof -a -p $$ -d'^0-2,^255' 2>/dev/null|awk '{if($4~/^[0-9]+/){gsub(/[^0-9]/,"",$4);print $4}}')"
for fdd in $FDS; do
	eval "exec $fdd>&-"
done


ONEXIT="$1"

msg(){
    local P
    P="${ME}[$$]${i:+(try #$i)}"
    echo "$P:" "$1" >&2
    logger -t "$P" "$1"
}

find_direct() {
	local R=$1
	local A AC IA IAC FA
	if A=`dig +short +time=1 -t $R $H`; then
		if [ -n "$A" ]; then
			AC=$(echo "$A"|wc -l)
			IA=`comm -12 <(echo "$I") <(echo "$A"|sort -u)`
			IAC=$(echo "$IA"|wc -l)
			if [ -n "$IA" ]; then
				msg "$R: $IAC of $AC records are local IPs: $(echo $IA)"
				echo "$IA" # Success
				if [ $AC -gt $IAC ]; then
					FA=`comm -13 <(echo "$I") <(echo "$A"|sort -u)`
					msg "WARNING: Not all $R records are assigned here. Foreign IPs: $(echo $FA)"
					return 1
				fi
			else
				msg "$R resolves to IP, but none are locally assigned: $(echo $A)"
				return 2
			fi
		else
			msg "$R is empty"
			return 3
		fi
	else
		msg "$R record resolution failed. Waiting..."
		return 4
	fi
}

get_hostname() {
	local cmd=H=
	while IFS='	' read cmd filter; do
		H=`eval $cmd 2>/dev/null`
		if [ $? -eq 0 -a  -n "$H" ]; then
			eval "echo "$H"${filter:+|$filter}"
			break
		fi
	done << \HOSTPROBE
hostname -f
hostname -A		tr " " "\\n"|grep "^$(hostname)"|head -1
host $(hostname)	cut -d" " -f1|head -1
HOSTPROBE
}

get_local_ips() {
	local cmd=H=
	while IFS='	' read cmd filter; do
		H=`eval $cmd 2>/dev/null`
		if [ $? -eq 0 -a  -n "$H" ]; then
			eval "echo "$H"${filter:+|$filter}"
			break
		fi
	done << \HOSTPROBE
hostname -I
ip a s scope global	awk '{if($1~"(inet|inet6)")print $2}'|cut -d'/' -f1
ipv46_get_local_ips
HOSTPROBE
}

for i in `seq 12`; do
	if H=`get_hostname`; [ -n "$H" ]; then
		msg "Hostname is $H"
	else
		msg "Waiting for hostname to resolve"
		sleep 3
		continue
	fi
	if I=`get_local_ips`; [ -n "$I" ]; then
		msg "IP assigned $I"
		I="$(echo $I|tr ' ' '\n'|sort -u)"
	else
		msg "Waiting for IP"
		sleep 3
		continue
	fi
	for R in A AAAA; do
		if D=`find_direct $R`; then
			msg "$R: $(echo $D)"
			eval "$R=\"$D\""
		else
			case $? in
				1)
					msg "$R record is present but might have issues. Continue anyway..."
					continue
					;;
				2)
					msg "Waiting for $R to resolve to local IP"
					sleep 5
					;;
				3)
					msg "$R record is empty."
					continue
					;;
				4)
					msg "$R record resolution failed. Waiting..."
					sleep 3
					;;
				*)
					msg "BUG: unknown exit code from find_direct()"
					exit 255
				;;
			esac
			continue 2
		fi
	done

	if [ -z "${A:-$AAAA}" ]; then
		msg "Waiting for A or AAAA to resolve"
		sleep 3
		continue
	fi
	PTR=
	PTRM=
	NAMES=
	for R in $(printf "$A\n$AAAA"|grep -v '^$'|sort -u); do
		if P=`dig +short +time=1 -x $R`; then
			P="$(echo "$P"|grep -v '/'|sort -u)"
			PC=$(echo "$P"|wc -l)
			if [ -n "$P" ]; then
				if [ $PC -gt 1 ]; then
					msg "WARNING: Multiple ($PC) PTR records exists for single IP ($R): $(echo $P)"
				fi
				if ! (echo "$P"|grep "^${H}\.*$" >/dev/null); then
					msg "WARNING: PTR for $R  $(echo $P) does not address hostname $H"
				fi
				for N in $P; do
					NAMES="$(echo "$NAMES"|awk -v N=${N%.} -v V=$R '{if($1==N){print $1" "$2","V; E=1}else{print}}END{if(E!=1)print N" "V}')"
				done
				msg "PTR for $R is $P"
				PTR="$(printf "$PTR\n$R $P\n")"
			else
				msg "WARNING: Address does not have PTR: $(echo $R)"
				PTRM="$(printf "$PTRM\n$R\n")"
			fi
		else
			msg "PTR $R record resolution failed. Waiting and starting over..."
			sleep 3
			continue 2
		fi
	done
	NAMES="$(echo "$NAMES"|grep -v '^$')"
	PTR="$(echo "$PTR"|grep -v '^$')"
	PTRM="$(echo "$PTRM"|grep -v '^$')"
	if [ -n "$NAMES" ]; then
		if [ $(echo "$NAMES"|wc -l) -gt 1 ]; then
			msg "WARNING: Multiple PTR names exists"
		fi
		msg "$(printf '\nPTR NAMES\n---------\n%s\n---------\n' "$NAMES")"
		break
	else
		msg "No PTR names were found. Waiting..."
		sleep 3
		continue
	fi
	sleep 2
done
if [ -n "$ONEXIT" ] && E=$(which "$ONEXIT"); then
	msg "Executing $E"
	exec "$E"
fi

